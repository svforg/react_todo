{"version":3,"sources":["AddItemForm/AddItemForm.tsx","EditableSpan/EditableSpan.tsx","TodoList/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","replace","trim","size","value","onChange","e","currentTarget","onKeyPress","key","helperText","variant","color","onClick","AddBox","EditableSpan","updateValue","editMode","setEditMode","autoFocus","type","onBlur","prepareString","string","onDoubleClick","TodoList","className","style","marginBottom","display","updateTodoListTitle","id","removeTodoList","Delete","createTask","tasks","map","task","isDone","checked","updateTaskStatus","name","updateTaskTitle","deleteTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","todoListId","todoList","find","tl","deleteTodoList","setTasks","newTask","totoListTaks","taskId","todoListTasks","newFilterValue","currentTL","position","edge","aria-label","Menu","fixed","container","padding","newTodoListId","spacing","allTasksTodoList","tasksForTodoList","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8df8739b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n};\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const prepareString = (string: string) => string.replace(/\\s+/g, ' ').trim();\r\n\r\n    const addItem = () => {\r\n        if (prepareString(title) !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        }\r\n        else {\r\n            setError(\"Title is required\");\r\n        }\r\n    };\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const inputKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        e.key === \"Enter\" && addItem();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <TextField\r\n                size=\"small\"\r\n                value={title}\r\n                onChange={inputChangeHandler}\r\n                onKeyPress={inputKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n                variant=\"outlined\"/>\r\n\r\n            <IconButton\r\n                color=\"primary\"\r\n                onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    updateValue: (value: string) => void\r\n};\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (\r\n    {\r\n        value,\r\n        updateValue\r\n    }\r\n) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const editModeOn = () => {\r\n        setEditMode(true);\r\n    };\r\n    const editModeOff = () => {\r\n        setEditMode(false);\r\n\r\n        const prepareString = (string: string) => string.replace(/\\s+/g, ' ').trim();\r\n\r\n        if (prepareString(title)) {\r\n            updateValue(prepareString(title));\r\n        }\r\n    };\r\n\r\n    const [title, setTitle] = useState<string>(value);\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                autoFocus\r\n                type=\"text\"\r\n                size=\"small\"\r\n                value={title}\r\n                onChange={inputChangeHandler}\r\n                onBlur={editModeOff}\r\n                variant=\"outlined\" />\r\n\r\n            : <span\r\n                onDoubleClick={editModeOn}>\r\n                {value}\r\n              </span>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType} from \"../App\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    removeTodoList: (id: string) => void\r\n    tasks: Array<TaskType>\r\n    createTask: (title: string, todoListId: string) => void\r\n    updateTaskTitle: (title: string, taskId: string, todoListId: string) => void\r\n    updateTodoListTitle: (title: string, todoListId: string) => void\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n    updateTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeFilter: (newFilterValueType: FilterValueType, todoListId: string) => void\r\n    filter: FilterValueType\r\n};\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n    const updateTodoListTitle = (title: string) => props.updateTodoListTitle(title, props.id);\r\n    const deleteTodoList = () => props.removeTodoList(props.id);\r\n\r\n    const createTask = (title: string) => props.createTask(title, props.id);\r\n\r\n    const btnFilterAll = () => props.changeFilter(\"all\", props.id);\r\n    const btnFilterActive = () => props.changeFilter(\"active\", props.id);\r\n    const btnFilterCompleted = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return (\r\n        <div className=\"TodoList\">\r\n            <div>\r\n                <strong style={{marginBottom: \"40px\", display:\"inline-block\"}}>\r\n                    <EditableSpan value={props.title} updateValue={updateTodoListTitle}/>\r\n                </strong>\r\n\r\n                <IconButton\r\n                    onClick={deleteTodoList}>\r\n                    <Delete />\r\n                </IconButton >\r\n\r\n                <AddItemForm addItem={createTask}/>\r\n\r\n                <ul>\r\n                    {\r\n                        props.tasks.map(task => {\r\n                            const updateTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                props.updateTaskStatus(task.id, e.currentTarget.checked, props.id);\r\n                            };\r\n                            const updateTaskTitle = (title: string) => props.updateTaskTitle(title, task.id, props.id);\r\n                            const deleteTask = () => props.deleteTask(task.id, props.id);\r\n\r\n                            return (\r\n                                <li key={task.id} className={task.isDone ? \"\" : \"is-done\"}>\r\n                                    <Checkbox\r\n                                        checked={task.isDone}\r\n                                        onChange={updateTaskStatus}\r\n                                        name=\"checkedB\"\r\n                                        color=\"primary\"/>\r\n\r\n                                    <EditableSpan\r\n                                        value={task.title}\r\n                                        updateValue={updateTaskTitle}/>\r\n\r\n                                    <IconButton\r\n                                        onClick={deleteTask}>\r\n                                        <Delete />\r\n                                    </IconButton >\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n\r\n                <div>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        color=\"primary\"\r\n                        onClick={btnFilterAll}>All</Button>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        color=\"primary\"\r\n                        onClick={btnFilterActive}>Active</Button>\r\n\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        color=\"primary\"\r\n                        onClick={btnFilterCompleted}>Completed</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {TodoList, TaskType} from './TodoList/TodoList';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport {classes} from \"istanbul-lib-coverage\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Container from \"@material-ui/core/Container/Container\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Paper from \"@material-ui/core/Paper/Paper\";\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n};\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string\r\n    filter: FilterValueType\r\n};\r\n\r\nfunction App() {\r\n    const todoListId1 = v1();\r\n    const todoListId2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"What to learn\", filter: \"all\",},\r\n        {id: todoListId2, title: \"What to buy\", filter: \"all\",},\r\n    ]);\r\n    const createTodoList = (title: string) => {\r\n        const newTodoListId = v1();\r\n        const newTodoList: TodoListType = {id: newTodoListId, title: title, filter: 'all'};\r\n        setTodoLists([newTodoList, ...todoLists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListId]: []\r\n        });\r\n    };\r\n    const updateTodoListTitle = (title: string, todoListId: string) => {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId);\r\n        if (todoList) {\r\n            todoList.title = title;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    };\r\n    const deleteTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId));\r\n        delete tasks[todoListId];\r\n        setTasks({...tasks});\r\n    };\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML5\", isDone: true,},\r\n            {id: v1(), title: \"CSS3\", isDone: true,},\r\n            {id: v1(), title: \"JS\", isDone: true,},\r\n            {id: v1(), title: \"React\", isDone: true,},\r\n            {id: v1(), title: \"Redux\", isDone: false,},\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Sass\", isDone: true,},\r\n            {id: v1(), title: \"TypeScript\", isDone: false,},\r\n            {id: v1(), title: \"Rest API\", isDone: false,},\r\n            {id: v1(), title: \"GSAP\", isDone: false,},\r\n        ],\r\n    });\r\n    const createTask = (title: string, todoListId: string) => {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false};\r\n        let totoListTaks = tasks[todoListId];\r\n        tasks[todoListId] = [newTask, ...totoListTaks];\r\n        setTasks({...tasks});\r\n    };\r\n    const updateTaskTitle = (title: string, taskId: string, todoListId: string) => {\r\n        let totoListTasks = tasks[todoListId];\r\n        let task = totoListTasks.find(task => task.id === taskId);\r\n        if (task) {\r\n            task.title = title;\r\n            setTasks({...tasks});\r\n        }\r\n    };\r\n    const updateTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        let totoListTasks = tasks[todoListId];\r\n        let task = totoListTasks.find(task => task.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    };\r\n    const deleteTask = (taskId: string, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId];\r\n        tasks[todoListId] = todoListTasks.filter(task => task.id !== taskId);\r\n        setTasks({...tasks});\r\n    };\r\n\r\n    const changeFilter = (newFilterValue: FilterValueType, todoListId: string) => {\r\n        let currentTL = todoLists.find(tl => tl.id === todoListId);\r\n\r\n        if (currentTL) {\r\n            currentTL.filter = newFilterValue;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\">\r\n                        ToDo\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={createTodoList}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let allTasksTodoList = tasks[tl.id];\r\n                        let tasksForTodoList = allTasksTodoList;\r\n\r\n                        if (tl.filter === \"active\")\r\n                            tasksForTodoList = allTasksTodoList.filter(task => task.isDone === true);\r\n\r\n                        if (tl.filter === \"completed\")\r\n                            tasksForTodoList = allTasksTodoList.filter(task => task.isDone === false);\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                            <TodoList\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            removeTodoList={deleteTodoList}\r\n                            tasks={tasksForTodoList}\r\n                            deleteTask={deleteTask}\r\n                            changeFilter={changeFilter}\r\n                            filter={tl.filter}\r\n                            updateTaskStatus={updateTaskStatus}\r\n                            updateTodoListTitle={updateTodoListTitle}\r\n                            createTask={createTask}\r\n                            updateTaskTitle={updateTaskTitle}/>\r\n                                </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}